//@version=6
indicator("Automatic Linear Regression", shorttitle="AutoLinReg", overlay=true)

const color ROSE_500 = color.new(#f43f5e, 30)
const color TEAL_500 = color.new(#14b8a6, 30)
const color GRAY_500 = color.new(#6b7280, 50)
const color SLATE_500 = color.new(#64748b, 95)

source = input.source(hl2, title="Source", tooltip="Source for linear regression calculation and alerts")
pivotBars = input.int(20, title="Pivot Bars", minval=10, maxval=50, tooltip="Number of left and right bars to consider for pivots")

useUpperDev = input.bool(true, title="Upper Deviation", inline="inline1") // checkbox next to input
upperDev = input.float(2.0, title="", inline="inline1")
useLowerDev = input.bool(true, title="Lower Deviation", inline="inline2")
lowerDev = input.float(2.0, title="", inline="inline2")
extendLeft = input.bool(false, title="Extend lines left")
extendRight = input.bool(true, title="Extend lines right")

var g1 = "Colors"
colorUpper = input.color(ROSE_500, title="", inline="colors", group=g1)
colorLower = input.color(TEAL_500, title="", inline="colors", group=g1)
colorBase = input.color(GRAY_500, title="", inline="colors", group=g1)
colorFill = input.color(SLATE_500, title="", inline="colors", group=g1)

float pivotHigh = ta.pivothigh(high, pivotBars, pivotBars)
float pivotLow = ta.pivotlow(low, pivotBars, pivotBars)

var float lastPivotHigh = na
var int lastPivotHighBar = na
var float lastPivotLow = na
var int lastPivotLowBar = na

if not na(pivotHigh)
    lastPivotHigh := pivotHigh
    lastPivotHighBar := bar_index - pivotBars

if not na(pivotLow)
    lastPivotLow := pivotLow
    lastPivotLowBar := bar_index - pivotBars

var int anchorBar = na

detectTrend() =>
    // Only on bars with a pivot
    if not na(lastPivotHigh) and not na(lastPivotLow)
        if lastPivotHighBar > lastPivotLowBar
            // Most recent pivot was a high, look for bearish trend
            if close < lastPivotHigh
                "Bearish"
            else
                "Bullish"
        else
            // Most recent pivot was a low, look for bullish trend
            if close > lastPivotLow
                "Bullish"
            else
                "Bearish"

calcSlope(float src, int anchorId) =>
    int length = (bar_index - anchorId) + 1
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        float sumX = 0.0
        float sumY = 0.0
        float sumXSquare = 0.0
        float sumXY = 0.0
        for i = 0 to length - 1 by 1
            float value = src[i]
            float position = i + 1.0
            sumX += position
            sumY += value
            sumXSquare += position * position
            sumXY += value * position
        float slope = (length * sumXY - sumX * sumY) / (length * sumXSquare - sumX * sumX)
        float average = sumY / length
        float intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

calcDev(float src, int anchorId, float slope, float average, float intercept) =>
    int length = (bar_index - anchorId) + 1
    float upDev = 0.0
    float downDev = 0.0
    float stdDevAcc = 0.0
    int positions = length - 1
    float value = intercept
    for i = 0 to positions by 1
        float price = high[i] - value
        if price > upDev
            upDev := price
        price := value - low[i]
        if price > downDev
            downDev := price
        price := src[i]
        price -= value
        stdDevAcc += price * price
        value += slope
    float stdDev = math.sqrt(stdDevAcc / (positions == 0 ? 1 : positions))
    [stdDev, upDev, downDev]

currentTrend = detectTrend()

// Set anchor based on trend
if currentTrend == "Bullish" and not na(lastPivotLow) and (na(anchorBar) or lastPivotLowBar != anchorBar)
    anchorBar := lastPivotLowBar
else if currentTrend == "Bearish" and not na(lastPivotHigh) and (na(anchorBar) or lastPivotHighBar != anchorBar)
    anchorBar := lastPivotHighBar

[slope, average, intercept] = calcSlope(source, anchorBar)
[stdDev, upDev, downDev] = calcDev(source, anchorBar, slope, average, intercept)

int length = not na(anchorBar) ? (bar_index - anchorBar) + 1 : 0
float startPrice = not na(intercept) and not na(slope) ? intercept + slope * (length - 1) : na
float endPrice = intercept

var string extension = switch
    extendLeft and extendRight => extend.both
    extendLeft => extend.left
    extendRight => extend.right
    => extend.none

var line baseLine = na

if na(baseLine) and not na(startPrice)
    baseLine := line.new(
      anchorBar,
      startPrice,
      bar_index,
      endPrice,
      width=1,
      extend=extension,
      color=colorBase)
else if not na(baseLine) and not na(startPrice)
    line.set_xy1(baseLine, anchorBar, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)

float upperStartPrice = startPrice + (useUpperDev ? upperDev * stdDev : upDev)
float upperEndPrice = endPrice + (useUpperDev ? upperDev * stdDev : upDev)

float lowerStartPrice = startPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)
float lowerEndPrice = endPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)

var line upper = na
var line lower = na

// Create or update the upper line
if na(upper) and not na(upperStartPrice)
    upper := line.new(
      anchorBar,
      upperStartPrice,
      bar_index,
      upperEndPrice,
      width=1,
      extend=extension,
      color=colorUpper)
else if not na(upper) and not na(upperStartPrice)
    line.set_xy1(upper, anchorBar, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)

// Create or update the lower line
if na(lower) and not na(lowerStartPrice)
    lower := line.new(
      anchorBar,
      lowerStartPrice,
      bar_index,
      lowerEndPrice,
      width=1,
      extend=extension,
      color=colorLower)
else if not na(lower) and not na(lowerStartPrice)
    line.set_xy1(lower, anchorBar, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)

// Fill the channel
linefill.new(upper, baseLine, color=colorFill)
linefill.new(baseLine, lower, color=colorFill)

// Alerts
alertcondition(
  source > line.get_price(upper, bar_index),
  title='Price Above Upper Channel',
  message="Price has broken above the upper regression channel")

alertcondition(
  source < line.get_price(lower, bar_index),
  title='Price Below Lower Channel',
  message="Price has broken below the lower regression channel")
