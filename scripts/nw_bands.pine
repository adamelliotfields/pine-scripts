//@version=6

// https://www.tradingview.com/script/Iko0E2kL-Nadaraya-Watson-Envelope-LuxAlgo © LuxAlgo (CC BY-NC-SA 4.0)
indicator("Nadaraya-Watson Bands", shorttitle="Nadaraya-Watson", overlay=true)

// Settings
price = input.source(hlc3, "Source")
lookback = input.int(200, "Lookback", minval=2, maxval=500)
smoothing = input.float(8.0, "Smoothing", minval=0.0) // bandwidth of the Gaussian kernel
width = input.float(3.0, "Width", minval=1.0)

var g1 = "Style"
upColor = input.color(color.aqua, "Colors             ", inline="style1", group=g1)
downColor = input.color(color.fuchsia, "", inline="style1", group=g1)

var weights = array.new_float(0)
var denominator = 0.0


// Gaussian kernel function where
// - x is the distance from the center
// - h (σ/sigma) is the bandwidth or width of the bell curve
// Data points further from center are given exponentially less weight
// Used to create a weighted average that's more responsive to recent data
gauss(x, h) =>
    math.exp(-(math.pow(x, 2) / (h * h * 2)))


// Initialize weights on first bar
if barstate.isfirst
    for i = 0 to lookback - 1
        w = gauss(i, smoothing)
        weights.push(w)
    denominator := weights.sum()

// Multiply each historical price by the corresponding weight and sum for a weighted average
// Normalize by dividing by the sum of the weights
result = 0.0
for i = 0 to lookback - 1
    result += price[i] * weights.get(i)
result /= denominator

// Simple moving average of the mean absolute error between the price and the Nadaraya-Watson line
mae = ta.sma(math.abs(price - result), lookback)

// Calculate the upper and lower bands based on the width
upper = result + (mae * width)
lower = result - (mae * width)

// Plot
plot(upper, "Upper", upColor)
plot(lower, "Lower", downColor)

// Display signal arrows on crossovers
plotshape(
  ta.crossunder(close, lower) ? low : na,
  title="Crossunder",
  style=shape.labelup,
  location=location.absolute,
  color=color(na), // transparent background
  text="▲",
  textcolor=upColor,
  size=size.tiny)

plotshape(
  ta.crossover(close, upper) ? high : na,
  title="Crossover",
  style=shape.labeldown,
  location=location.absolute,
  color=color(na),
  text="▼",
  textcolor=downColor,
  size=size.tiny)
