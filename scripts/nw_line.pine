//@version=6
indicator("Nadaraya-Watson Line", shorttitle="Nadaraya-Watson", overlay=true)

// Settings
source = input.source(hlc3, "Source")
kernel = input.string("Gaussian", "Kernel", options=["Gaussian", "Epanechnikov"])
lookback = input.int(20, "Lookback", minval=2, maxval=200, step=1)
smoothing = input.float(5.0, "Smoothing", minval=0.1, step=0.1)


// Gaussian kernel function where:
// * x is the distance from the center
// * h (Ïƒ/sigma) is the bandwidth or width of the bell curve
// Data points further from center are given exponentially less weight
// Used to create a weighted average that's more responsive to recent data
gaussian(x, h) =>
    math.exp(-(math.pow(x, 2) / (2 * h * h)))


// Epanechnikov kernel function
// Computationally less expensive than Gaussian and more responsive
// p(x|c) = 3/4c * max(0, 1 - (x/c)^2)
epanechnikov(x, c) =>
    result = 1 - math.pow(x / c, 2)
    result > 0 ? (0.75 / c) * result : 0.0


var float nw = na
nw := 0.0
float numerator = 0.0
float denominator = 0.0

for i = 0 to lookback - 1
    weight = 1.0
    if kernel == "Epanechnikov"
        weight := epanechnikov(i, smoothing)
    if kernel == "Gaussian"
        weight := gaussian(i, smoothing)
    numerator += source[i] * weight
    denominator += weight

nw := numerator / denominator

// Plot
plot(nw, "Nadaraya-Watson", color=color.new(#22d3ee, 0), linewidth=2) // cyan-400
