//@version=6
indicator("Nadaraya-Watson Line", shorttitle="NW Line", overlay=true)

const string GAUSSIAN = "Gaussian"
const string EPANECHNIKOV = "Epanechnikov"
const string EXPONENTIAL = "Exponential"

const color CYAN_400 = color.new(#22d3ee, 0)

// Settings
source = input.source(hlc3, title="Source")
kernel = input.string(EPANECHNIKOV, title="Kernel", options=[GAUSSIAN, EPANECHNIKOV, EXPONENTIAL])
lookback = input.int(20, title="Lookback", minval=2, maxval=200, step=1)
smoothing = input.float(5.0, title="Smoothing", minval=0.1, step=0.1)

// Gaussian kernel function where:
// * x is the distance from the center
// * h (Ïƒ/sigma) is the bandwidth or width of the bell curve
// Data points further from center are given exponentially less weight
// Used to create a weighted average that's more responsive to recent data
gaussian(x, h) =>
    math.exp(-(math.pow(x, 2) / (2 * h * h)))

// Epanechnikov kernel function
// Computationally less expensive than Gaussian and more responsive
epanechnikov(x, c) =>
    float result = 1 - math.pow(x / c, 2)
    result > 0 ? (0.75 / c) * result : 0.0

// Exponential kernel function
// Weights decay exponentially like an EMA
exponential(x, c) =>
    math.exp(-x / c)

var float nw = na
float numerator = 0.0
float denominator = 0.0

for i = 0 to lookback - 1
    float weight = 1.0
    if kernel == GAUSSIAN
        weight := gaussian(i, smoothing)
    else if kernel == EPANECHNIKOV
        weight := epanechnikov(i, smoothing)
    else if kernel == EXPONENTIAL
        weight := exponential(i, smoothing)
    numerator += source[i] * weight
    denominator += weight

nw := numerator / denominator

// Plot
plot(nw, "Line", color=CYAN_400, linewidth=2)
