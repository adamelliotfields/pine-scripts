//@version=6

// https://www.tradingview.com/script/ZMdZlGaJ-Volume-Speed-By-MUQWISHI © MUQWISHI (MPL 2.0)
indicator("Volume Meter", overlay=true)

const int TABLE_WIDTH = 50
const int NUM_SECONDS = 62 // 2 second buffer to avoid out-of-bounds error
const int SPACE = 1 // set to 0 to remove space between cells

tablePosition = input.string(
  "bottom_center",
  title="Location | Size",
  inline="inline1",
  options=["top_right", "middle_right", "bottom_right", "top_center", "middle_center", "bottom_center", "top_left", "middle_left", "bottom_left"])

textSize = input.string(
  "tiny",
  title="",
  inline="inline1",
  options=["auto", "huge", "large", "normal", "small", "tiny"])

// Table colors
tableBgColor = input.color(#000000, title="Background | Text Color    ", inline="inline2")
tableTextColor = input.color(#ffffff, "", inline="inline2")

// Cell colors
upColor = input.color(#0c5a99, title="Up | Down Color  ", inline="inline3")
downColor = input.color(#e65100, title="", inline="inline3")


// Format volume
formatVolume(x) =>
    x > 999999 ? str.tostring(x, format.volume) : str.tostring(x)


// Apply gradient color
colorGradient(col, z) =>
    R = color.r(col), G = color.g(col), B = color.b(col)

    // RGB to HSL
    r1 = R / 255, g1 = G / 255, b1 = B / 255

    cMax = math.max(r1, g1, b1)
    cMin = math.min(r1, g1, b1)
    delta = cMax - cMin

    h = 0.0
    if delta != 0
        if cMax == r1
            h := ((g1 - b1) / delta) % 6
        else if cMax == g1
            h := (b1 - r1) / delta + 2
        else if cMax == b1
            h := (r1 - g1) / delta + 4
        h := h < 0 ? (h * 60) + 360 : h * 60

    l = (cMax + cMin) / 2
    s = delta != 0 ? delta / (1 - math.abs(2 * l - 1)) : 0.0

    // Update lightness
    l := (80 - z) / 100
    l := l > 1 ? 1 : l < -1 ? -1 : l // clamp

    // HSL to RGB
    c = (1 - math.abs(2 * l - 1)) * s
    x = c * (1 - math.abs((h / 60) % 2 - 1))
    m = l - c / 2

    r2 = 0.0, g2 = 0.0, b2 = 0.0
    if h >= 0 and h < 60
        r2 := c, g2 := x, b2 := 0
    else if h >= 60 and h < 120
        r2 := x, g2 := c, b2 := 0
    else if h >= 120 and h < 180
        r2 := 0, g2 := c, b2 := x
    else if h >= 180 and h < 240
        r2 := 0, g2 := x, b2 := c
    else if h >= 240 and h < 300
        r2 := x, g2 := 0, b2 := c
    else if h >= 300 and h < 360
        r2 := c, g2 := 0, b2 := x

    color.rgb((r2 + m) * 255, (g2 + m) * 255, (b2 + m) * 255)


// Initialize matrix
var lowerTimeframe = matrix.new<float>(0, 5, na)

// Fetch lower timeframe data
[lowerClose, lowerTime, lowerVolume, lowerStart] = request.security_lower_tf(
  syminfo.tickerid,
  "1S",
  [close, time, volume, session.isfirstbar ? 1 : 0],
  true)

var change = 0
if lowerClose.size() > 0 and lowerClose.size() == lowerTime.size() and lowerTime.size() == lowerVolume.size()
    start = lowerClose.size() - NUM_SECONDS < 0 ? 0 : lowerClose.size() - NUM_SECONDS
    end = lowerClose.size()
    lowerTime := lowerTime.slice(start, end)
    lowerVolume := lowerVolume.slice(start, end)
    lowerClose := lowerClose.slice(start, end)
    lowerStart := lowerStart.slice(start, end)

    for i = 0 to lowerClose.size() - 1
        closeTime = lowerTime.get(i)
        closeVolume = lowerVolume.get(i)
        closeClose = lowerClose.get(i)
        closeStart = lowerStart.get(i)

        if lowerTimeframe.rows() > 0
            priceClose = lowerTimeframe.get(0, 2)
            if priceClose != closeClose
                change := (closeClose - priceClose) / priceClose > 0 ? 1 : -1

        lowerTimeframe.add_row(0, array.from(closeTime, change, closeClose, closeVolume, closeStart))

        while lowerTimeframe.rows() > NUM_SECONDS
            lowerTimeframe.remove_row(lowerTimeframe.rows()-1)

// Create table
var table tbl = na
if lowerTimeframe.rows() > 2
    tbl := table.new(
      tablePosition,
      TABLE_WIDTH + 2,
      4,
      tableBgColor,
      tableTextColor,
      1,
      color.new(tableBgColor, TABLE_WIDTH),
      SPACE)


// Table cell helper
cell(col, row, txt, width, height, textColor, bgColor, tooltip) =>
    tbl.cell(col, row, txt, width, height, textColor, bgcolor=bgColor, text_size=textSize)
    if tooltip != ""
        tbl.cell_set_tooltip(col, row, tooltip)


// Draw table
if barstate.islast and not na(tbl)
    table.clear(tbl, 0, 0, TABLE_WIDTH + 1, 3)

    upVolume = 0.0
    downVolume = 0.0
    for i = 0 to lowerTimeframe.rows() - 3
        if lowerTimeframe.get(i, 1) > 0
            upVolume += lowerTimeframe.get(i, 3)
        else
            downVolume += lowerTimeframe.get(i, 3)

    sumVolume = upVolume + downVolume
    averageVolume = sumVolume / (lowerTimeframe.rows() - 2)

    cell(0, 3, "00000.000000", 0, 0.0001, color(na), color(na), "Total Up Volume")
    cell(TABLE_WIDTH + 1, 3, "00000.000000", 0, 0.0001, color(na), color(na), "Total Down Volume")

    cell(0, 1, formatVolume(upVolume), 0, 0, tableTextColor, upColor, "Total Up Volume")
    cell(TABLE_WIDTH + 1, 1, formatVolume(downVolume), 0, 0, tableTextColor, downColor, "Total Down Volume")

    cell(0, 0, "UP", 0, 0, tableTextColor, color(na), "Total Up Volume")
    cell(TABLE_WIDTH + 1, 0, "DOWN", 0, 0, tableTextColor, color(na), "Total Down Volume")

    upStrength = math.round(upVolume / sumVolume * TABLE_WIDTH)
    downStrength = TABLE_WIDTH - upStrength

    var upColorArray = array.new<color>(TABLE_WIDTH, upColor)
    var downColorArray = array.new<color>(TABLE_WIDTH, downColor)

    for i = 0 to TABLE_WIDTH - 1
        cell(1 + i, 0, "", 0.3, 0, color(na), color(na), "")
        cell(1 + i, 2, "", 0.3, 0, color(na), color(na), "")
        cell(1 + i, 3, "", 0.3, 0.0001, color(na), color(na), "")

        array.set(upColorArray, i, colorGradient(upColor, i))
        array.set(downColorArray, i, colorGradient(downColor, i))

        if i < upStrength
            cell(1 + i, 1, "", 0.3, 0, tableTextColor, upColorArray.get(i), "")

        if i < downStrength
            cell(TABLE_WIDTH - i, 1, "", 0.3, 0, tableTextColor, downColorArray.get(i), "")

    // Merge cells to display warning if not live data
    if not barstate.isrealtime
        table.merge_cells(tbl, 1, 0, TABLE_WIDTH, 0)
        cell(1, 0, "⚠ Live Data Required", 0, 0, color.red, color(na), "")
