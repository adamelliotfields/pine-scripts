// https://www.tradingview.com/script/ZMdZlGaJ-Volume-Speed-By-MUQWISHI © MUQWISHI (MPL 2.0)

//@version=5
indicator("Volume Meter", "Meter", overlay = true)

// Table Settings
var G1 = "Widget Settings"

// Location 
tablePos = input.string("Bottom Center", "Location | Size",
  ["Top Right" , "Middle Right", "Bottom Right" ,
   "Top Center", "Middle Center", "Bottom Center",
   "Top Left", "Middle Left", "Bottom Left" ],
  inline = "0", group = G1, display = display.none)

// Size
tableSiz = input.string("Small", "",
  ["Auto", "Huge", "Large", "Normal", "Small", "Tiny"],
  inline = "0", group = G1, display = display.none)

tableWidth = 50

// Cell Colors
upXCC = input.color(#0c5a99, "Up | Down Color  ", group = G1, inline = "1")
dnXCC = input.color(#E65100, "", group = G1, inline = "1")
clrMd = input.string("Gradient", "", ["Solid", "Gradient"], group = G1, inline = "1", display = display.none)

// Table Colors
tBgCol = input.color(#000000, "Background | Text Color    ", group = G1, inline = "2", display = display.none)
tTxCol = input.color(#ffffff, "", group = G1, inline = "2", display = display.none)

// Cell Space
space = 1 // set to 0 to remove space between cells

// History Length (number of bars)
// TODO: rename and document what the extra 2 are for
nRow = 62 // 60 bars + 2

// Get Number of Strings Function
strVol (x) => str.tostring(x, format.volume)
strTik (x) => str.tostring(x, format.mintick)

// Declare Matrix
var mtx = matrix.new<float>(0, 5, na) // Lower Timeframe

// Import Data
[cls, tim, vol, sBr] = request.security_lower_tf(syminfo.tickerid, "1S",
  [close, time, volume, session.isfirstbar ? 1 : 0], true)

var chg = 0
if cls.size() > 0 and cls.size() == tim.size() and cls.size() == vol.size()
    sIdx = cls.size() - nRow < 0 ? 0 : cls.size() - nRow
    eIdx = cls.size()

    tim0 = tim.slice(sIdx, eIdx)
    vol0 = vol.slice(sIdx, eIdx)
    cls0 = cls.slice(sIdx, eIdx)
    sBr0 = sBr.slice(sIdx, eIdx)

    for i = 0 to cls0.size() - 1
        cTim = tim0.get(i)
        cVol = vol0.get(i)
        cCls = cls0.get(i)
        csBr = sBr0.get(i)

        if mtx.rows() > 0
            // Price Change
            pCls = mtx.get(0, 2)
            if pCls != cCls
                chg := (cCls - pCls) / pCls > 0 ? 1 : -1

        // Add new rows with values to Matrix
        mtx.add_row(0, array.from(cTim, chg, cCls, cVol, csBr))

        // Remove over rows from a Matrix
        while mtx.rows() > nRow
            mtx.remove_row(mtx.rows()-1)

// Get Table Location & Size
locNsze(x) => 
    y   = str.split(str.lower(x), " ")
    out = ""
    for i = 0 to y.size() - 1
        out := out + y.get(i)
        if i != y.size() - 1
            out := out + "_"
    out

// Get Volume Format
volForm(x) => x > 999999 ? strVol(x) : str.tostring(x)

// Get Speed Info
speed(x1, x2) =>
    var unit = switch syminfo.type
        "stock"  => " Shares/"
        "dr"     => " Shares/"
        "fund"   => " Shares/"
        "crypto" => " Coins/"
        => " Units/"

    varip spMin = 0.0
    varip spMax = 0.0
    varip spTim = timenow

    speed = barstate.isrealtime ? x1 / x2 : 0

    spMin := spMin == 0 ? speed : math.min(speed, spMin)
    spMax := spMax == 0 ? speed : math.max(speed, spMax)

    [volForm(math.round(speed, 6)) + unit + "s",
     volForm(math.round(spMin, 6)) + unit + "s",
     volForm(math.round(spMax, 6)) + unit + "s",
     str.format_time(spTim, "HH:mm:ss yyyy-MM-dd", "GMT-5")]

// Get Dynamic Scale Bar Color
colorLab(col, z) =>
    R = color.r(col), G = color.g(col),  B = color.b(col)

    // RGB To HSL
    r1 = R / 255, g1 = G / 255, b1 = B / 255

    cMax = math.max(r1, g1, b1)
    cMin = math.min(r1, g1, b1)
    dlta = cMax - cMin

    h = 0.0
    if dlta != 0
        if cMax == r1
            h := ((g1 - b1) / dlta) % 6
        else if cMax == g1
            h := (b1 - r1) / dlta + 2
        else if cMax == b1
            h := (r1 - g1) / dlta + 4

        h := h < 0 ? (h * 60) + 360 : h * 60

    l = (cMax + cMin) / 2
    s = dlta != 0 ? dlta / (1 - math.abs(2 * l - 1)) : 0.0

    // Update Lightness
    l := (85 - 60.0 / 100.0 * z) / 100
    l := l > 1 ? 1 : l < -1 ? -1 : l

    // HSL To RGB
    c = (1 - math.abs(2 * l - 1)) * s
    x = c * (1 - math.abs((h / 60) % 2 - 1))
    m = l - c / 2

    r2 = 0.0, g2 = 0.0, b2 = 0.0
    if h >= 0 and h < 60
        r2 := c, g2 := x, b2 := 0
    else if h >= 60 and h < 120
        r2 := x, g2 := c, b2 := 0
    else if h >= 120 and h < 180
        r2 := 0, g2 := c, b2 := x
    else if h >= 180 and h < 240
        r2 := 0, g2 := x, b2 := c
    else if h >= 240 and h < 300
        r2 := x, g2 := 0, b2 := c
    else if h >= 300 and h < 360
        r2 := c, g2 := 0, b2 := x

    color.rgb((r2 + m) * 255, (g2 + m) * 255, (b2 + m) * 255)

sColor(col)=>
    var out = array.new<color>(tableWidth, col)
    if clrMd == "Gradient"
        for i = 0 to out.size() - 1
            array.set(out, i, colorLab(col, i))
    out

// Create Table
var table tbl = na
if mtx.rows() > 2
    tbl := table.new(locNsze(tablePos), tableWidth + 2, 4, tBgCol,
      tTxCol, 1, color.new(tBgCol, tableWidth), space)

// Get Cell Function
cell(col, row, txt, w, h, color, txtCol, tip) =>
    tbl.cell(col, row, txt, w, h, txtCol, bgcolor = color, text_size = locNsze(tableSiz))
    if tip != ""
        tbl.cell_set_tooltip(col, row, tip)

// Draw Table
if barstate.islast and not na(tbl)
    table.clear(tbl, 0, 0, tableWidth + 1, 3)

    upVol = .0
    dnVol = .0
    for i = 0 to mtx.rows() - 3
        if mtx.get(i, 1) > 0
            upVol += mtx.get(i, 3)
        else
            dnVol += mtx.get(i, 3)

    span  = (timenow - mtx.get(mtx.rows() -3, 0)) / 1000
    smVol = upVol + dnVol
    avVol = smVol/(mtx.rows() - 2)

    // Up & Down Volumes Columns
    cell(0, 3, "00000.000000", 0, 0.0001, color(na), color(na), "Total Up Volume")
    cell(tableWidth + 1, 3, "00000.000000", 0, 0.0001, color(na), color(na), "Total Down Volume")

    cell(0, 1, volForm(upVol), 0, 0, upXCC, tTxCol, "Total Up Volume")
    cell(tableWidth + 1, 1, volForm(dnVol), 0, 0, dnXCC, tTxCol, "Total Down Volume")

    cell(0, 0, "UP", 0, 0, color(na), tTxCol, "Total Up Volume")
    cell(tableWidth + 1, 0, "DOWN", 0, 0, color(na), tTxCol, "Total Down Volume")

    // Volume Dynamic Scale Bar
    upStng = math.round(upVol/smVol * tableWidth)
    dnStng = tableWidth - upStng

    var upCol = sColor(upXCC)
    var dnCol = sColor(dnXCC)
    for i = 0 to tableWidth - 1
        cell(1 + i, 0, "", 0.3, 0, color(na), color(na), "")
        cell(1 + i, 2, "", 0.3, 0, color(na), color(na), "")
        cell(1 + i, 3, "", 0.3, 0.0001, color(na), color(na), "")

        if i < upStng
            cell(1 + i, 1, "", 0.3, 0, upCol.get(i), tTxCol, "")

        if i < dnStng
            cell(tableWidth - i, 1, "", 0.3, 0, dnCol.get(i), tTxCol, "")

    table.merge_cells(tbl, 1, 0, tableWidth, 0)
    if not barstate.isrealtime
        cell(1, 0, "⚠ This Tool Performs During Live Market", 0, 0, color(na), color.red, "")
