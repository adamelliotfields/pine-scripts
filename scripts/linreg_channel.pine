//@version=6
indicator("Linear Regression Channel", shorttitle="Linear Regression", overlay=true)

// Settings
price = input.source(hlc3, title="Source")
length = input.int(100, title="Length", minval=2, maxval=500)

var g1 = "Channel Settings"
useUpperDev = input.bool(true, title="Upper Deviation", inline="inline1", group=g1) // checkbox next to input
upperDev = input.float(2.0, title="", inline="inline1", group=g1)
useLowerDev = input.bool(true, title="Lower Deviation", inline="inline2", group=g1)
lowerDev = input.float(2.0, title="", inline="inline2", group=g1)

var g2 = "Display Settings"
extendLeft = input.bool(false, title="Extend Lines Left", group=g2)
extendRight = input.bool(true, title="Extend Lines Right", group=g2)
extension = switch
    extendLeft and extendRight => extend.both
    extendLeft => extend.left
    extendRight => extend.right
    => extend.none

var g3 = "Color Settings"
colorUpper = input.color(color.new(color.lime, 90), title="", inline="inline3", group=g3)
colorLower = input.color(color.new(color.red, 90), title="", inline="inline3", group=g3)

// Ordinary least squares (OLS) regression
sumX = 0.0
sumY = 0.0
sumXY = 0.0
sumXSqr = 0.0
for i = 0 to length - 1 by 1
    value = price[i]
    period = i + 1.0
    sumX += period
    sumY += value
    sumXSqr += period * period
    sumXY += value * period

slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX) // (n * ∑xy - ∑x∑y) / (n * ∑x² - (∑x)²)
average = sumY / length
intercept = average - slope * sumX / length + slope
startPrice = intercept + slope * (length - 1)
endPrice = intercept

var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(
      bar_index - length + 1,
      startPrice,
      bar_index,
      endPrice,
      width=1,
      extend=extension,
      color=color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - length + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na

upDev = 0.0
downDev = 0.0
stdDevAcc = 0.0
deltaSumXX = 0.0
deltaSumYY = 0.0
deltaSumXY = 0.0
periods = length - 1
deltaAvgY = intercept + slope * periods / 2
value = intercept
for j = 0 to periods by 1
    residual = high[j] - value
    if residual > upDev
        upDev := residual
    residual := value - low[j]
    if residual > downDev
        downDev := residual
    residual := price[j]
    deltaXTerm = residual - average
    deltaYTerm = value - deltaAvgY
    residual -= value
    stdDevAcc += residual * residual
    deltaSumXX += deltaXTerm * deltaXTerm
    deltaSumYY += deltaYTerm * deltaYTerm
    deltaSumXY += deltaXTerm * deltaYTerm
    value += slope

stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
pearsonR = deltaSumXX == 0 or deltaSumYY == 0 ? 0 : deltaSumXY / math.sqrt(deltaSumXX * deltaSumYY)

upperStartPrice = startPrice + (useUpperDev ? upperDev * stdDev : upDev)
upperEndPrice = endPrice + (useUpperDev ? upperDev * stdDev : upDev)

var line upper = na
lowerStartPrice = startPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)
lowerEndPrice = endPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)

var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(
      bar_index - length + 1,
      upperStartPrice,
      bar_index,
      upperEndPrice,
      width=1,
      extend=extension,
      color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - length + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)
    na
if na(lower) and not na(lowerStartPrice)
    lower := line.new(
      bar_index - length + 1,
      lowerStartPrice,
      bar_index,
      lowerEndPrice,
      width=1,
      extend=extension,
      color=color.new(colorLower, 0))
else
    line.set_xy1(lower, bar_index - length + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)
    na

linefill.new(upper, baseLine, color=colorUpper)
linefill.new(baseLine, lower, color=colorLower)

float trend = math.sign(startPrice - endPrice) // sign function outputs -1, 0, or 1

// Custom alert conditions
alertcondition(
  price > line.get_price(upper, bar_index) or price < line.get_price(lower, bar_index),
  title='Regression Channel Exited',
  message="The price movement has exited Regression Channel's bounds")
alertcondition(
  trend[1] >= 0 and trend < 0,
  title='Switched to Uptrend',
  message='The Regression Channel trend switched from Downtrend to Uptrend')
alertcondition(
  trend[1] <= 0 and trend > 0,
  title='Switched to Downtrend',
  message='The Regression Channel trend switched from Uptrend to Downtrend')
