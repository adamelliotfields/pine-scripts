//@version=6
indicator("Anchored Linear Regression Channel", shorttitle="Linear Regression", overlay=true)

// Settings
source = input.source(hl2, title="Source")
start = input.time(0, title="Start", confirm=true) // confirm enables interactive mode

var g1 = "Channel Settings"
useUpperDev = input.bool(true, title="Upper Deviation", inline="channelUpper", group=g1) // checkbox next to input
upperDev = input.float(2.0, title="", inline="channelUpper", group=g1)
useLowerDev = input.bool(true, title="Lower Deviation", inline="channelLower", group=g1)
lowerDev = input.float(2.0, title="", inline="channelLower", group=g1)

var g2 = "Display Settings"
extendLeft = input.bool(false, title="Extend Lines Left", group=g2)
extendRight = input.bool(true, title="Extend Lines Right", group=g2)

var g3 = "Color Settings"
colorUpper = input.color(color.new(#14b8a6, 30), title="", inline="colors", group=g3) // teal-500
colorLower = input.color(color.new(#f43f5e, 30), title="", inline="colors", group=g3) // rose-500
colorBase = input.color(color.new(#64748b, 50), title="", inline="colors", group=g3) // slate-500
colorFill = input.color(color.new(#cbd5e1, 90), title="", inline="colors", group=g3) // slate-300

// Find the start bar index
var int startBarIndex = na
if time >= start and na(startBarIndex)
    startBarIndex := bar_index

// Custom linear regression calculation
calcSlope(float src, int idx) =>
    int length = (bar_index - idx) + 1
    max_bars_back(src, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        float sumX = 0.0
        float sumY = 0.0
        float sumXSquare = 0.0
        float sumXY = 0.0
        for i = 0 to length - 1 by 1
            float value = src[i]
            float position = i + 1.0
            sumX += position
            sumY += value
            sumXSquare += position * position
            sumXY += value * position
        float slope = (length * sumXY - sumX * sumY) / (length * sumXSquare - sumX * sumX)
        float average = sumY / length
        float intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

calcDev(float src, int idx, float slope, float average, float intercept) =>
    int length = (bar_index - idx) + 1
    float upDev = 0.0
    float downDev = 0.0
    float stdDevAcc = 0.0
    int positions = length - 1
    float value = intercept
    for j = 0 to positions by 1
        float price = high[j] - value
        if price > upDev
            upDev := price
        price := value - low[j]
        if price > downDev
            downDev := price
        price := src[j]
        price -= value
        stdDevAcc += price * price
        value += slope
    float stdDev = math.sqrt(stdDevAcc / (positions == 0 ? 1 : positions))
    [stdDev, upDev, downDev]

// Calculate regression when we have a start point
[slope, average, intercept] = calcSlope(source, startBarIndex)
int length = (bar_index - startBarIndex) + 1
float startPrice = intercept + slope * (length - 1)
float endPrice = intercept

[stdDev, upDev, downDev] = calcDev(source, startBarIndex, slope, average, intercept)

var string extension = switch
    extendLeft and extendRight => extend.both
    extendLeft => extend.left
    extendRight => extend.right
    => extend.none

var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(
      startBarIndex,
      startPrice,
      bar_index,
      endPrice,
      width=1,
      extend=extension,
      color=colorBase)
else
    line.set_xy1(baseLine, startBarIndex, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)

float upperStartPrice = startPrice + (useUpperDev ? upperDev * stdDev : upDev)
float upperEndPrice = endPrice + (useUpperDev ? upperDev * stdDev : upDev)

var line upper = na
float lowerStartPrice = startPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)
float lowerEndPrice = endPrice + (useLowerDev ? -lowerDev * stdDev : -downDev)

var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(
      startBarIndex,
      upperStartPrice,
      bar_index,
      upperEndPrice,
      width=1,
      extend=extension,
      color=colorUpper)
else
    line.set_xy1(upper, startBarIndex, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)

if na(lower) and not na(lowerStartPrice)
    lower := line.new(
      startBarIndex,
      lowerStartPrice,
      bar_index,
      lowerEndPrice,
      width=1,
      extend=extension,
      color=colorLower)
else
    line.set_xy1(lower, startBarIndex, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)

// Fill the channel
linefill.new(upper, baseLine, color=colorFill)
linefill.new(baseLine, lower, color=colorFill)

// Custom alert conditions
alertcondition(
  source > line.get_price(upper, bar_index) or source < line.get_price(lower, bar_index),
  title='Regression Channel Exited',
  message="The price movement has exited Regression Channel's bounds")
