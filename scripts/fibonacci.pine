//@version=6

// https://www.tradingview.com/script/2HmHKuo1-Fibonacci-Toolkit-LuxAlgo Â© LuxAlgo (CC BY-NC-SA 4.0)
indicator("Fibonacci", overlay=true)

extendRetracements = input.bool(true, "Extend Retracements")
start = input.time(0, "Start", confirm=true)
end = input.time(0, "End", confirm=true)
price = input.source(hlc3, "Source")

var g1 = "Fibonacci"
fibA = input.bool(true, "Fib A", inline="inline1", group=g1)
fibALvl = input.float(0.236, "", inline="inline1", group=g1)
fibAColor = input.color(#2157f3, "", inline="inline1", group=g1) // blue

fibB = input(true, "Fib B", inline="inline2", group=g1)
fibBLvl = input(0.382, "", inline="inline2", group=g1)
fibBColor = input(#0cb51a, "", inline="inline2", group=g1) // green

fibC = input(true, "Fib C", inline="inline3", group=g1)
fibCLvl = input(0.5, "", inline="inline3", group=g1)
fibCColor = input(#ff5d00, "", inline="inline3", group=g1) // red

fibD = input(true, "Fib D", inline="inline4", group=g1)
fibDLvl = input(0.618, "", inline="inline4", group=g1)
fibDColor = input(#64b5f6, "", inline="inline4", group=g1) // light blue

fibE = input(true, "Fib E", inline="inline5", group=g1)
fibELvl = input(0.786, "", inline="inline5", group=g1)
fibEColor = input(#673ab7, "", inline="inline5", group=g1) // purple

fibF = input(true, "Fib F", inline="inline6", group=g1)
fibFLvl = input(1.0, "", inline="inline6", group=g1)
fibFColor = input(#e91e63, "", inline="inline6", group=g1) // dark red

connectingLine = input(true, "Line", inline="inline7", group=g1)
lineColor = input(color.gray, "", inline="inline7", group=g1)

var fib = array.new_float(0)
var fibColor = array.new_color(0)

if barstate.isfirst
    if fibA
        array.push(fib, fibALvl)
        array.push(fibColor, fibAColor)
    if fibB
        array.push(fib, fibBLvl)
        array.push(fibColor, fibBColor)
    if fibC
        array.push(fib, fibCLvl)
        array.push(fibColor, fibCColor)
    if fibD
        array.push(fib, fibDLvl)
        array.push(fibColor, fibDColor)
    if fibE
        array.push(fib, fibELvl)
        array.push(fibColor, fibEColor)
    if fibF
        array.push(fib, fibFLvl)
        array.push(fibColor, fibFColor)

n = bar_index
dt = time - time[1]

startN = ta.valuewhen(time == start, n, 0)
endN = ta.valuewhen(time == end, n, 0)

startY = ta.valuewhen(time == start, price, 0)
endY = ta.valuewhen(time == end, price, 0)

diffN = endN - startN
diffY = startY - endY

if n == math.max(startN, endN)
    a = 0
    b = 1
    sum = 0
    s2 = math.sqrt(2)

    if connectingLine
        line.new(startN, startY, endN, endY, color=lineColor)

    for i = 0 to array.size(fib) - 1
        lvl = endY + array.get(fib, i) * diffY
        line.new(startN, lvl, endN, lvl, color=array.get(fibColor, i))

        if extendRetracements
            startExt = math.max(startN, endN)
            line.new(
              startExt,
              lvl,
              startExt + 1,
              lvl,
              color=array.get(fibColor, i),
              extend=extend.right,
              style=line.style_dashed)

        style = label.style_label_right
        label.new(
          math.min(startN, endN),
          lvl,
          str.tostring(array.get(fib, i)),
          color=color(na), // transparent
          style=style,
          textcolor=array.get(fibColor, i),
          textalign=text.align_center,
          size=size.small)
