//@version=6

// https://www.tradingview.com/script/PDi6enZR-Adaptive-Kalman-filter-Trend-Strength-Oscillator-Zeiierman Â© Zeiierman (CC BY-NC-SA 4.0)
indicator("Kalman Filter Line", shorttitle="Kalman", overlay=true)

price = input.source(
  hlc3,
  title="Source")

processNoise = input.float(
  1.0,
  title="Process Noise",
  minval=0.0,
  maxval=100.0,
  step=1.0,
  tooltip="The noise factor for the Kalman filter process. A higher value increases the filter's responsiveness to price changes, but may result in less smooth output.")

observationNoise = input.float(
  10.0,
  title="Observation Noise",
  minval=0.0,
  maxval=100.0,
  step=1.0,
  tooltip="The amount of noise in the price data, impacting how much the filter trusts the current price series.")

var g1 = "Trend Strength"
lookback = input.int(20, "Lookback", minval=2, maxval=100, step=1, group=g1)

var g2 = "Style"
lineWidth = input.int(3, "Width", minval=1, maxval=5, step=1, group=g2, display=display.none)
bearishColor = input.color(color.red, title="Bearish", group=g2)
bullishColor = input.color(color.lime, title="Bullish", group=g2)
neutralColor = input.color(color.aqua, title="Neutral", group=g2)

// Indicators
var float filteredPrice = na
var float trendStrength = na

// Velocity (rate of change) is used to calculate trend strength for coloring the line
var velocities = array.new<float>()

// State transition matrix
// Predicts how the system evolves over time
var F = matrix.new<float>(2, 2, 0.0)
F.set(0, 0, 1.0) // position
F.set(0, 1, 1.0) // velocity
F.set(1, 1, 1.0) // velocity coefficient (how velocity changes over time)

// Error covariance matrix
// Represents the uncertainty of the estimate
var P = matrix.new<float>(2, 2, 0.0)
matrix.set(P, 0, 0, 1.0)
matrix.set(P, 1, 1, 1.0)

// Process noise covariance matrix
// Represents uncertainty in how the system evolves over time
var Q = matrix.new<float>(2, 2, 0.0)
matrix.set(Q, 0, 0, processNoise)
matrix.set(Q, 0, 1, processNoise)
matrix.set(Q, 1, 0, processNoise)
matrix.set(Q, 1, 1, processNoise)

// Observation noise covariance matrix
// Represents uncertainty in the observation
var R = matrix.new<float>(1, 1, observationNoise)

// Observation matrix
// Maps the state space to the observation space
var H = matrix.new<float>(1, 2, 0.0)
matrix.set(H, 0, 0, 1.0)

// Identity matrix
// In matrix multiplication, the identity matrix is the equivalent of the number 1
var I = matrix.new<float>(2, 2, 0.0)
matrix.set(I, 0, 0, 1.0)
matrix.set(I, 1, 1, 1.0)

// State vector
// The first element is the filtered price (position), the second element is the rate of change (velocity)
var X = array.from(0.0, 0.0)
if barstate.isfirst
    X := array.from(price, 0.0)

// Only update when the bar closes, not on every tick, to avoid repainting issues
if barstate.isconfirmed
    // 1. Predict the next state, X
    // 1a. Next position is the current position plus the current velocity
    // 1b. Next velocity is the current velocity
    x1 = matrix.get(F, 0, 0) * array.get(X, 0) + matrix.get(F, 0, 1) * array.get(X, 1)
    x2 = matrix.get(F, 1, 1) * array.get(X, 1) // F[1, 1] == 1.0
    X := array.from(x1, x2)

    // 2. Update the uncertainty of the prediction, P
    P := F.mult(P.mult(F.transpose())).sum(Q)

    // 3. Calculate the Kalman gain, K
    R_copy = R.copy()
    S = H.mult(P.mult(H.transpose())).sum(R_copy)
    K = P.mult(H.transpose().mult(S.inv()))

    // 4. Update the state estimate, X, based on the price observation
    residual = price - array.get(H.mult(X), 0)
    correction = K.mult(residual)
    X := array.from(
         array.get(X, 0) + matrix.get(correction, 0, 0),
         array.get(X, 1) + matrix.get(correction, 1, 0))

    // 5. After incorporating the observation, update the uncertainty again
    P := I.sum(K.mult(H).mult(-1)).mult(P)
    filteredPrice := array.get(X, 0)
    velocity = array.get(X, 1)

    // Trend strength is the percentage of the maximum absolute velocity (-100 to 100)
    array.push(velocities, velocity)
    if array.size(velocities) >= lookback
        float A = velocities.abs().max()
        trendStrength := (velocity / A) * 100
        array.shift(velocities)

// Gradient coloring by trend strength
var int numSegments = 10
segmentWidth = 100 / numSegments
filledSegments = math.floor(math.abs(trendStrength) / segmentWidth)
lineColor = neutralColor
if not na(trendStrength)
    for i = 0 to numSegments - 1
        if i < filledSegments
            lineColor := color.new(trendStrength > 0 ? bullishColor : bearishColor, 80 - i * 10)
        else
            break

// Plot the line
plot(filteredPrice, title="Line", color=lineColor, linewidth=lineWidth)

// Output trend strength but don't display it
plot(trendStrength, title="Trend Strength", display=display.none)
